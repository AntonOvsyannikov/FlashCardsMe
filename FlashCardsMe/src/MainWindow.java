
import Model.Model;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import static java.awt.event.WindowEvent.WINDOW_CLOSING;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.*;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class MainWindow extends javax.swing.JFrame {

    Model model;

    /**
     * Creates new form MainDialog
     */
    public MainWindow(java.awt.Frame parent, boolean modal) {
        model = new Model();


        //setIconImage(new ImageIcon("Icon.gif").getImage());
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.gif")));

        initComponents();
        
        
        
        Misc.centerWindow(this);        
        
        Misc.assignESCforClose(this);

        ((DefaultListCellRenderer) jListDecks.getCellRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        
        jListDecks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        rebuildList();
        jListDecksValueChanged(null);
    }
    
    void rebuildList() {
        DefaultListModel<Model.Deck> listModel = (DefaultListModel)jListDecks.getModel();
        listModel.clear();
        model.listDecks().forEach(d->listModel.addElement(d));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonRename = new javax.swing.JButton();
        jButtonCopy = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonLearn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDecks = new javax.swing.JList();
        jButtonImport = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FlashCardsMe");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("FlashCardsMe Decks");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonAdd.setText("+");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonDelete.setText("-");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonRename.setText("Rename...");
        jButtonRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenameActionPerformed(evt);
            }
        });

        jButtonCopy.setText("Copy...");
        jButtonCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Edit...");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonLearn.setText("Learn!");
        jButtonLearn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLearnActionPerformed(evt);
            }
        });

        jListDecks.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jListDecks.setModel(new DefaultListModel<>());
        jListDecks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDecksMouseClicked(evt);
            }
        });
        jListDecks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDecksValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListDecks);

        jButtonImport.setText("Import...");
        jButtonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportActionPerformed(evt);
            }
        });

        jButtonExport.setText("Export...");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButtonLearn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonRename)
                    .addComponent(jButtonCopy)
                    .addComponent(jButtonImport)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonExport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLearn)
                .addContainerGap())
        );

        jButton3.setText("About");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenameActionPerformed
        Model.Deck selectedDeck = (Model.Deck)jListDecks.getSelectedValue();
        if (selectedDeck!=null) {
            String s = showInputDialog("Input new deck name", selectedDeck.getName());
            if ((s != null) && (s.length()>0)) {
                try {
                    model.renameDeck(selectedDeck, s);
                    rebuildList();
                    jListDecks.setSelectedValue(selectedDeck, true);
                } catch (IOException ex) {
                    showMessageDialog(this, ex.getMessage(), "Error", WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButtonRenameActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        Model.Deck selectedDeck = (Model.Deck)jListDecks.getSelectedValue();
        if (selectedDeck!=null) {
            selectedDeck.open();
            new EditDeckDialog2(this,selectedDeck).setVisible(true);
            selectedDeck.close();
        }
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jButtonLearnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLearnActionPerformed
        Model.Deck selectedDeck = (Model.Deck)jListDecks.getSelectedValue();
        if (selectedDeck!=null) {
            selectedDeck.open();
            new LearnDialog2(this, selectedDeck).setVisible(true);
            selectedDeck.close();
        }
    }//GEN-LAST:event_jButtonLearnActionPerformed

    private void jListDecksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDecksValueChanged
        jButtonDelete.setEnabled(jListDecks.getSelectedIndex()!=-1);
        jButtonRename.setEnabled(jListDecks.getSelectedIndex()!=-1);
        jButtonCopy.setEnabled(jListDecks.getSelectedIndex()!=-1);
        jButtonEdit.setEnabled(jListDecks.getSelectedIndex()!=-1);
        jButtonLearn.setEnabled(jListDecks.getSelectedIndex()!=-1);
        jButtonExport.setEnabled(jListDecks.getSelectedIndex()!=-1);
    }//GEN-LAST:event_jListDecksValueChanged

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        String s = showInputDialog("Please input New Deck name", "New Deck");
        if ((s != null) && (s.length()>0)) {
            try {
                Model.Deck deck = model.createDeck(s, null);
                rebuildList();
                jListDecks.setSelectedValue(deck, true);
            } catch (IOException|Model.Exception ex) {
                showMessageDialog(this, ex.getMessage(), "Error", WARNING_MESSAGE);
            }
        }
     }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        Model.Deck selectedDeck = (Model.Deck)jListDecks.getSelectedValue();
        if (selectedDeck!=null) {
            if (showConfirmDialog(this, "Are you sure to delete deck " + selectedDeck.getName() + " and all it's media", "Delete Deck", YES_NO_OPTION, WARNING_MESSAGE) == YES_OPTION) {
                if (showConfirmDialog(this, "Please double check removal of the deck " + selectedDeck.getName() + " and all it's media! Confirm?", "Delete Deck", YES_NO_OPTION, WARNING_MESSAGE) == YES_OPTION) {
                    try {
                        
                        model.deleteDeck(selectedDeck);
                        rebuildList();
                    } catch (IOException ex) {
                        showMessageDialog(this, ex.getMessage(), "Error", WARNING_MESSAGE);
                    }
                }
            }
//            showConfirmDialog(this, "Confirm removal of the deck" + selectedDeck.getName() + "and all it's media");
            
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyActionPerformed
        Model.Deck selectedDeck = (Model.Deck)jListDecks.getSelectedValue();
        if (selectedDeck!=null) {
            String s = showInputDialog("Input New Deck name to copy to", selectedDeck.getName()+" Copy");
            if ((s != null) && (s.length()>0)) {
                try {
                    Model.Deck deck = model.createDeck(s, selectedDeck);
                    rebuildList();
                    jListDecks.setSelectedValue(deck, true);
                    
                    if (new File(selectedDeck.getDeckMediaDirectory()).exists())
                        showMessageDialog(this, "Deck has media, please import it to \""+deck.getName()+"\" again");
                    
                } catch (IOException|Model.Exception ex) {
                    showMessageDialog(this, ex.getMessage(), "Error", WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButtonCopyActionPerformed

    private void jListDecksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDecksMouseClicked
        if (evt.getClickCount() == 2)
            jButtonLearnActionPerformed(null);
    }//GEN-LAST:event_jListDecksMouseClicked

    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        Model.Deck selectedDeck = (Model.Deck)jListDecks.getSelectedValue();
        if (selectedDeck==null) return;
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter deckFilter = new FileNameExtensionFilter("Deck files (*.jfc)", "jfc");
        fc.addChoosableFileFilter(deckFilter);
        fc.setFileFilter(deckFilter);
        
        int returnVal = fc.showSaveDialog(this);
        if (returnVal != APPROVE_OPTION) return;

        new ProgressDialog(this, "Exporting deck...", new ExtendedSwingWorker () {
            protected Void doInBackground()  {
                try {
                    model.exportDeck(selectedDeck, fc.getSelectedFile(), this);
                    showMessageDialog(null, "Succesfuly exported!");
                } catch (IOException ex) {
                    showMessageDialog(null, ex.getMessage(), "Error", WARNING_MESSAGE);
//                    Logger.getLogger(EditDeckDialog2.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
        }).showDialog();

/*        
        try {
            model.exportDeck(selectedDeck, fc.getSelectedFile());
            showMessageDialog(this, "Succesfuly exported!");
        } catch (IOException ex) {
            showMessageDialog(this, ex.getMessage(), "Error", WARNING_MESSAGE);
        }
*/            
    }//GEN-LAST:event_jButtonExportActionPerformed

    private void jButtonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter deckFilter = new FileNameExtensionFilter("Deck files (*.jfc)", "jfc");
        fc.addChoosableFileFilter(deckFilter);
        fc.setFileFilter(deckFilter);
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal != APPROVE_OPTION) return;
        new ProgressDialog(this, "Importing deck...", new ExtendedSwingWorker () {
            protected Void doInBackground()  {
            try {
                File f = fc.getSelectedFile();
                Model.Deck deck = model.createDeck(f.getName(), null);
                model.importDeck(deck, f, this);
                showMessageDialog(null, "Succesfuly imported!");
                rebuildList();
                jListDecks.setSelectedValue(deck, true);
            } catch (IOException|Model.Exception ex) {
                showMessageDialog(null, ex.getMessage(), "Error", WARNING_MESSAGE);
            }
                return null;
            }
        }).showDialog();
        
        
        

    }//GEN-LAST:event_jButtonImportActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JTextArea ta = new JTextArea(7,20);
        ta.setText("FlashCardsMe ver1.0\nby Anton Ovsyannikov\naovsyannikov@gmail.com\n2017\n\nOpen source software. Free to use, redistribute or change. Contibutions are welcome");
        ta.setWrapStyleWord(true);
        ta.setLineWrap(true);
        ta.setCaretPosition(0);
        ta.setEditable(false);
        JOptionPane.showMessageDialog(null, new JScrollPane(ta), "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow dialog = new MainWindow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCopy;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JButton jButtonImport;
    private javax.swing.JButton jButtonLearn;
    private javax.swing.JButton jButtonRename;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListDecks;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
