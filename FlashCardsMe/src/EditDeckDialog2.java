
import Model.Model;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.*;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class EditDeckDialog2 extends javax.swing.JDialog implements TableModelListener {

    Model.Deck deck;
    
    Action action;
    
    List<Model.Deck.Record> interface_records = null;
    List<Model.Deck.Field> interface_fields = null;

    public EditDeckDialog2(java.awt.Frame parent, Model.Deck deck)  {
        super(parent, true);
        
        this.deck=deck;
        
        action = new AbstractAction () {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            }
        };

        setTitle("Edit deck \""+deck.getName()+"\"");
        
        initComponents();
        
//        this.setSize(new Dimension(700,500));
        
        Misc.centerWindow(this);        
        
        getRootPane().setDefaultButton(jButtonExit);
        
        Misc.assignESCforClose(this);

//        jTableDeck.getTableHeader().setReorderingAllowed(false);
//        jTableDeck.setColumnSelectionAllowed(true);
        
        
        
        rebuildDeck();
    }

    void rebuildDeck(){
        DefaultTableModel t = (DefaultTableModel)jTableDeck.getModel();

        t.removeTableModelListener(this);

        t.setRowCount(0);
        t.setColumnCount(0);

        interface_fields = deck.listFields();
        interface_fields.stream().forEachOrdered(f -> t.addColumn(f.getName()));
        
//        deck.listCards().forEach(c -> t.addRow(new Vector<>(fields.stream().map(f -> c.getField(f.getName())).collect(Collectors.toList()))));

        interface_records = deck.listRecords();
        interface_records.forEach(r -> 
                t.addRow(
                        new Vector<>(
                                interface_fields.stream()
                                        .map(f -> r.getFieldContent(f))
                                        .collect(Collectors.toList())
                        )
                )
        );
        
        t.addTableModelListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonRecAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonRecDel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButtonFieldDel = new javax.swing.JButton();
        jButtonFieldAdd = new javax.swing.JButton();
        jButtonFieldRename = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDeck = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButtonExit = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButtonImportCSV = new javax.swing.JButton();
        jButtonImportMedia = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButtonCardTemplates = new javax.swing.JButton();
        jButtonClasses = new javax.swing.JButton();
        jButtonDescription = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonRecAdd.setAction(action);
        jButtonRecAdd.setText("+");
        jButtonRecAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRecAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Records:");

        jButtonRecDel.setAction(action);
        jButtonRecDel.setText("-");
        jButtonRecDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRecDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRecAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRecDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonRecAdd)
                    .addComponent(jButtonRecDel))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Fields:");

        jButtonFieldDel.setAction(action);
        jButtonFieldDel.setText("-");
        jButtonFieldDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFieldDelActionPerformed(evt);
            }
        });

        jButtonFieldAdd.setAction(action);
        jButtonFieldAdd.setText("+");
        jButtonFieldAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFieldAddActionPerformed(evt);
            }
        });

        jButtonFieldRename.setAction(action);
        jButtonFieldRename.setText("Rename...");
        jButtonFieldRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFieldRenameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFieldAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFieldDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFieldRename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonFieldAdd)
                    .addComponent(jButtonFieldDel)
                    .addComponent(jButtonFieldRename))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTableDeck.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableDeck.setMinimumSize(new java.awt.Dimension(0, 0));
        jTableDeck.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableDeckFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableDeckFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTableDeck);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonExit)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Precede the field name with \"*\" for \"hidden\" fields, used only for filtering");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Import:");

        jButtonImportCSV.setText("CSV...");
        jButtonImportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportCSVActionPerformed(evt);
            }
        });

        jButtonImportMedia.setText("Media...");
        jButtonImportMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportMediaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportMedia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonImportCSV)
                    .addComponent(jButtonImportMedia)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("Edit:");

        jButtonCardTemplates.setText("Templates...");
        jButtonCardTemplates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCardTemplatesActionPerformed(evt);
            }
        });

        jButtonClasses.setText("Classes...");
        jButtonClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClassesActionPerformed(evt);
            }
        });

        jButtonDescription.setText("Description...");
        jButtonDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCardTemplates, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClasses, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCardTemplates)
                    .addComponent(jButtonClasses)
                    .addComponent(jLabel5)
                    .addComponent(jButtonDescription))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCardTemplatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCardTemplatesActionPerformed
        new CardsTemplatesDialog2(this, deck).setVisible(true);
    }//GEN-LAST:event_jButtonCardTemplatesActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        Misc.closeWindow(this);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        deck.dbCommit();
    }//GEN-LAST:event_formWindowClosing

    private void jButtonImportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportCSVActionPerformed
/*        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            ImportCSVDialog icsvdlg = new ImportCSVDialog(this,file);
            if (icsvdlg.showDialog()){
                ImportCSVProgress p = new ImportCSVProgress(this, deck, icsvdlg.getCSV());
                p.setVisible(true);
                rebuildDeck();
            }
        }   
*/        
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            final ImportCSVDialog.Result result = new ImportCSVDialog(this, file, deck).showDialog();
            
            if (result != null) {
                CSVReader2 csv = result.csvReader;
                deck.dbCommit();
                if (new ProgressDialog(this, "Importing CSV...", new SwingWorker<Void, Void> () {
                    protected Void doInBackground()  {
                        long i = 0;
                        int fieldsCounted = 0;
                        
                        Map<String, Model.Deck.Record> recordsIndex = new HashMap<>();
                        if (result.updateByField) {
                            List<Model.Deck.Record> records = deck.listRecords();
                            Model.Deck.Field field = deck.getFieldByName(result.updateByFieldName);
                            if (field != null) records.forEach(r->recordsIndex.put(r.getFieldContent(field),r));
                        }
                        
//                        List<Model.Deck.Field> fields = deck.listFields();
                        List<String> csvFieldNames = new ArrayList<>();

                        while (!isCancelled()) {
                            
                            if (csv.linesCount-1>0) 
                                setProgress((int)(100*i/(csv.linesCount-1))); 
                            else
                                setProgress(100); 

                            List<String> row = csv.readRow();
                            if (row == null) break;
                            
                            if (result.hasHeader && (i==0)) { // header
                                
                                row.forEach(f->{deck.createFieldIfNotExist(f); csvFieldNames.add(f);});
                            
                            } else {
                                
                                if (!result.hasHeader) {
                                    for (int j = fieldsCounted; j < row.size(); j++) {
                                        String f = "field" + Integer.toString(j+1);
                                        deck.createFieldIfNotExist(f);
                                        csvFieldNames.add(f);
                                        fieldsCounted = j+1;
                                    }
                                }
                                
                                List<String> subRow = row.subList(0, Math.min(row.size(),csvFieldNames.size()));

                                String updateBy_FieldContent = null;
                                Model.Deck.Record rec = null;
                                
                                if (result.updateByField) {
                                    int fn = csvFieldNames.indexOf(result.updateByFieldName);
                                    if (fn!=-1) {
                                        updateBy_FieldContent = subRow.get(fn);
                                        rec = recordsIndex.get(updateBy_FieldContent);
                                    }
                                }
                                
                                if (rec == null) rec = deck.createRecord();
                                for (int j = 0; j < subRow.size(); j++) 
                                    rec.setFieldContent(deck.getFieldByName(csvFieldNames.get(j)), row.get(j));

                                if (updateBy_FieldContent!=null) recordsIndex.put(updateBy_FieldContent, rec);
                                
                            }
                            i++;
                        }
                        csv.close();
                        return null;
                    }
                }).showDialog()) 
                    deck.dbCommit(); 
                else 
                    deck.dbRollback();
                rebuildDeck();
            }
        }   

    }//GEN-LAST:event_jButtonImportCSVActionPerformed

    private void jButtonImportMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportMediaActionPerformed

        JFileChooser fc = new JFileChooser();
//        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setMultiSelectionEnabled(true);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

/*
            new ProgressDialog(this, "Importing media...", new SwingWorker<Void, Void> () {
                protected Void doInBackground()  {
                    String mediaDir = deck.getDeckMediaDirectory();
                    new File(mediaDir).mkdirs();
                    Path dst = Paths.get(mediaDir);
                    boolean replace_all = false;

                    File[] files = fc.getSelectedFiles();
                    for (int i = 0; i < files.length && !isCancelled(); i++) {
                        setProgress(100*i/(files.length-1));
                        File file = files[i];
                        try {
                            if (replace_all)
                                Files.copy(file.toPath(), dst.resolve(file.getName()), REPLACE_EXISTING);
                            else try {
                                Files.copy(file.toPath(), dst.resolve(file.getName()));
                            } catch (FileAlreadyExistsException ex) {
                                String[] buttons = { "Replace", "Replace All", "Do not replace", "Cancel" };

                                switch(
                                        showOptionDialog(null, "File \"" + file.getName() + "\" already exist. Replace?", "File already exist", YES_NO_OPTION, QUESTION_MESSAGE, null, buttons, buttons[2])) {
                                    case 1: 
                                        replace_all = true;
                                    case 0:
                                        Files.copy(file.toPath(), dst.resolve(file.getName()), REPLACE_EXISTING);
                                        break;
                                    case 2: break;
                                    case 3: return null;
                                }
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(EditDeckDialog2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    return null;
                }
            }).showDialog();

            
*/
            
            File[] files = fc.getSelectedFiles();
            new ProgressDialog(this, "Importing media...", new ExtendedSwingWorker () {
                protected Void doInBackground()  {
                    try {
                        deck.importMedia(files, this);
                    } catch (IOException ex) {
                        Logger.getLogger(EditDeckDialog2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return null;
                }
            }).showDialog();
        }   
    }//GEN-LAST:event_jButtonImportMediaActionPerformed

    private void jButtonFieldAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFieldAddActionPerformed
        String s = JOptionPane.showInputDialog("Please input field name");
        if ((s != null) && (s.length()>0)) {
            deck.createFieldIfNotExist(s);
            rebuildDeck();
        }
    }//GEN-LAST:event_jButtonFieldAddActionPerformed

    private void jTableDeckFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableDeckFocusGained
//        action.setEnabled(true);
    }//GEN-LAST:event_jTableDeckFocusGained

    private void jTableDeckFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableDeckFocusLost
//        action.setEnabled(false);
    }//GEN-LAST:event_jTableDeckFocusLost

    private void jButtonRecAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecAddActionPerformed
        deck.createRecord();
        rebuildDeck();
        Rectangle rect= jTableDeck.getCellRect(jTableDeck.getRowCount()-1, 1, true);
        jTableDeck.scrollRectToVisible(rect);
        jTableDeck.setRowSelectionInterval(jTableDeck.getRowCount()-1, jTableDeck.getRowCount()-1);
//        jTableDeck.setColumnSelectionInterval(0,0);
        jTableDeck.changeSelection(jTableDeck.getRowCount()-1, 0, false, false);
        jTableDeck.requestFocus();
    }//GEN-LAST:event_jButtonRecAddActionPerformed

    private void jButtonFieldDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFieldDelActionPerformed
        List<Model.Deck.Field> fields = deck.listFields();
        Object[] possibleValues = fields.toArray();
        int col = jTableDeck.getSelectedColumn();
        
        Model.Deck.Field selectedValue = (Model.Deck.Field)JOptionPane.showInputDialog(null, "Choose field to delete:", "Input", JOptionPane.INFORMATION_MESSAGE, null, possibleValues, possibleValues[col==-1?0:col]);
        if (selectedValue != null) {
            deck.deleteField(selectedValue);
            rebuildDeck();
        }
    }//GEN-LAST:event_jButtonFieldDelActionPerformed

    private void jButtonRecDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecDelActionPerformed
        int[] rows = jTableDeck.getSelectedRows();

        for (int i:rows) {
            deck.deleteRecord(interface_records.get(i));
        }
        rebuildDeck();
    }//GEN-LAST:event_jButtonRecDelActionPerformed

    private void jButtonFieldRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFieldRenameActionPerformed
        int col = jTableDeck.getSelectedColumn();
        if (col != -1) {
            Model.Deck.Field f = interface_fields.get(col);
            String newName = (String) JOptionPane.showInputDialog("Rename field ["+f.getName()+"] to:");
            if (newName != null) {
                deck.setFieldName(f, newName);
                rebuildDeck();
            }
        }
                
    }//GEN-LAST:event_jButtonFieldRenameActionPerformed

    private void jButtonClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClassesActionPerformed
        new CardsClassesDialog(this, deck).setVisible(true);
    }//GEN-LAST:event_jButtonClassesActionPerformed

    private void jButtonDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDescriptionActionPerformed
        new EditDeckDescriptionDialog(this, deck).setVisible(true);
        
    }//GEN-LAST:event_jButtonDescriptionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCardTemplates;
    private javax.swing.JButton jButtonClasses;
    private javax.swing.JButton jButtonDescription;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonFieldAdd;
    private javax.swing.JButton jButtonFieldDel;
    private javax.swing.JButton jButtonFieldRename;
    private javax.swing.JButton jButtonImportCSV;
    private javax.swing.JButton jButtonImportMedia;
    private javax.swing.JButton jButtonRecAdd;
    private javax.swing.JButton jButtonRecDel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDeck;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel)e.getSource();
        String columnName = model.getColumnName(column);
        String data = (String) model.getValueAt(row, column);
        Model.Deck.Record record = interface_records.get(row);
        record.setFieldContent(deck.getFieldByName(columnName), data);
    }
}
